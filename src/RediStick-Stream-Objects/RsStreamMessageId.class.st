Class {
	#name : 'RsStreamMessageId',
	#superclass : 'Object',
	#instVars : [
		'mainId',
		'subId'
	],
	#classInstVars : [
		'all',
		'newest',
		'min',
		'max',
		'autoGenerated',
		'neverDelivered'
	],
	#category : 'RediStick-Stream-Objects',
	#package : 'RediStick-Stream-Objects'
}

{ #category : 'constants' }
RsStreamMessageId class >> all [
	^ all ifNil: [ all := self reserved: '0' ]
]

{ #category : 'constants' }
RsStreamMessageId class >> autoGenerated [
	^ autoGenerated ifNil: [ autoGenerated := self reserved: '*' ]
]

{ #category : 'instance creation' }
RsStreamMessageId class >> epoch [
	^ self mainId: 0 subId: 0
]

{ #category : 'instance creation' }
RsStreamMessageId class >> fromString: aString [
	| tokens tokensSize |
	tokens := aString findTokens: '-'.
	tokensSize := tokens size.
	^ tokensSize = 2
		  ifTrue: [ self mainId: tokens first subId: tokens last ]
		  ifFalse: [ ^ self mainId: aString subId: nil ]
]

{ #category : 'instance creation' }
RsStreamMessageId class >> fromStringOrNil: aStringOrNil [
	aStringOrNil ifNil: [ ^nil ].
	^ self fromString: aStringOrNil 
]

{ #category : 'instance creation' }
RsStreamMessageId class >> idWithAutoSequence: mainId [
	^ self new mainId: mainId; subId: '*'; yourself
]

{ #category : 'instance creation' }
RsStreamMessageId class >> mainId: mainId subId: subId [
	^ self new mainId: mainId; subId: subId; yourself
]

{ #category : 'instance creation' }
RsStreamMessageId class >> mainIdOnly: mainId [
	^ self mainId: mainId subId: nil
]

{ #category : 'instance creation' }
RsStreamMessageId class >> mainIdSubIncremented: mainId [
	^ self mainId: mainId subId: '*'
]

{ #category : 'constants' }
RsStreamMessageId class >> max [
	^ max ifNil: [ max := self reserved: '+' ]
]

{ #category : 'constants' }
RsStreamMessageId class >> min [
	^ min ifNil: [ min := self reserved: '-' ]
]

{ #category : 'constants' }
RsStreamMessageId class >> neverDelivered [
	^ neverDelivered ifNil: [ neverDelivered := self reserved: '>' ]
]

{ #category : 'constants' }
RsStreamMessageId class >> newest [
	^ newest ifNil: [ newest := self reserved: '$' ]
]

{ #category : 'private' }
RsStreamMessageId class >> reserved: mainId [
	^ self mainId: mainId subId: nil
]

{ #category : 'constants' }
RsStreamMessageId class >> zero [
	^ self all
]

{ #category : 'comparing' }
RsStreamMessageId >> < other [
	self mainId = other mainId ifTrue: [ ^ self compareSubId: other ].
	^ self mainId < other mainId
]

{ #category : 'comparing' }
RsStreamMessageId >> <= other [
	^ (self > other) not
]

{ #category : 'comparing' }
RsStreamMessageId >> = other [
	self class = other class ifFalse: [ ^ false ].
	self mainId = other mainId ifFalse: [ ^ false ].
	self subId = other subId ifFalse: [ ^ false ].
	^ true
]

{ #category : 'comparing' }
RsStreamMessageId >> > other [
	^ other < self
]

{ #category : 'comparing' }
RsStreamMessageId >> >= other [
	^ other <= self
]

{ #category : 'printing' }
RsStreamMessageId >> asString [
	^ String streamContents: [ :strm | self printOn: strm ]
]

{ #category : 'comparing' }
RsStreamMessageId >> compareSubId: other [
	| leftId rightId |
	leftId := self subId ifNil: [0].
	rightId := other subId ifNil: [0].
	^ leftId asNumber < rightId asNumber 
]

{ #category : 'comparing' }
RsStreamMessageId >> hash [
	^ self mainId hash bitXor: self subId hash
]

{ #category : 'testing' }
RsStreamMessageId >> isAutoSequence [
	^ self subId = '*'
]

{ #category : 'accessing' }
RsStreamMessageId >> mainId [

	^ mainId
]

{ #category : 'accessing' }
RsStreamMessageId >> mainId: anObject [

	mainId := anObject
]

{ #category : 'printing' }
RsStreamMessageId >> printOn: aStream [
	aStream nextPutAll: self mainId asString.
	subId ifNil: [ ^ self ].
	aStream nextPut: $-.
	aStream nextPutAll: self subId asString.
]

{ #category : 'accessing' }
RsStreamMessageId >> subId [

	^ subId
]

{ #category : 'accessing' }
RsStreamMessageId >> subId: anObject [

	subId := anObject
]
